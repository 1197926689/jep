Jep 3.6 Release Notes
*********************
This release emphasized consistency and new features.  It is compatible
with Python 2.6, 2.7, 3.2, 3.3, 3.4, and 3.5.


FreeBSD support
~~~~~~~~~~~~~~~
Jep can now be built on FreeBSD.


Improved method choosing
~~~~~~~~~~~~~~~~~~~~~~~~
Jep now has improved method choosing when Python tries to call a Java
method that is overloaded.  Methods and Constructors will be chosen based
off of how closely the Python inputs match the Java argument types.


Improved primitive and boxed type conversions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Python "primitives" such as ints, floats, and booleans can now be passed
directly to Java methods which expect Java boxed types such as Long, Short,
Byte, Double, or Character (Integer and Double were already supported in older
versions). Also Java methods which return boxed types will now return the
Python equivalent instead. This autoboxing is not limited to just methods, the
same types of conversions will occur for constructors, arrays, and fields. The
new behavior is intended to make Jep imitate the autoboxing performed by the
Java compiler. This change might break Python written for older versions of Jep
if it is calling methods on the boxed types that are no longer returned from
Java methods. For example, calling a Java method from Python that returns an
Integer and then calling intValue() to convert it to a primitive int will no
longer work. In this case the Integer is automatically converted to an int so
the call to intValue() is no longer necessary and can simply be removed.


Python initialization variables
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Jep now supports configuring global Python interpreter variables before
the Python interpreter has been initialized.  These global variables
correspond roughly to the Python command line arguments such as
python -B or python -E.  For more information, see the javadoc on PyConfig
and/or run python --help from a command line.  *Contributed by Jeff Stein.*


Improved efficiency
~~~~~~~~~~~~~~~~~~~
* Jep now manages local references more efficiently, freeing up Java heap
memory earlier for long running Python code.
* Jep is more efficient when transforming Python ndarrays to/from Java
NDArrays.


Unsigned NDArray support
~~~~~~~~~~~~~~~~~~~~~~~~
Jep now supports unsigned Python ndarrays transforming to/from unsigned
Java NDarrays.  *Contributed by Tim Verbelen.*


Compatibility notes
===================

Autoboxing primitives
~~~~~~~~~~~~~~~~~~~~~
Java boxed types such as Byte, Character, Short, Integer, Long, Float, and
Double are now autoboxed to Python primitives in the interpreter.  Therefore,
as stated in an example above, calling a Java method from Python that returns
a java.langInteger will now autobox the Integer to a Python int.  Calling
.intValue() on that Python int will fail as there is no intValue() attr on the
primitive.  In this example, there is no longer a need to call .intValue() as
the type has already been converted.  This applies to all Java boxed types.


PyJList += operator
~~~~~~~~~~~~~~~~~~~
The PyJList += operator no longer supports adding a single value/object
to the list.  This makes PyJList behave more like a Python list, where
in *list += obj*, obj must be iterable.

